<?xml version="1.0" encoding="UTF-8"?>
<!-- shoutout to https://github.com/wiverson/maven-jpackage-template -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.github.weichware10</groupId>
  <artifactId>analyse</artifactId>
  <version>v0.2-SNAPSHOT</version>

  <name>${app.name}</name>
  <url>https://github.com/weichware10/analyse</url>

  <!-- This description text is included in the Windows installer by default, see win-jpackage.txt -->
  <description>AnalyseClient zur Analyse der visuellen Aufmerksamkeit (weichware10)</description>

  <properties>
    <!-- ENTRY POINT -->
    <main-class>github.weichware10.analyse.Main</main-class>
    <app.name>Analyse</app.name>

    <!-- timestamp + windows installer friendly app version -->
    <maven.build.timestamp.format>yy.ww.WWkkmm</maven.build.timestamp.format>
    <app.version>${maven.build.timestamp}</app.version>

    <!-- modules for custom JVM image -->
    <!-- JAVAFX: media, controls, fxml -->
    <!-- UTIL: sql, management, security.sasl -->
    <jvm.modules>javafx.media,javafx.controls,javafx.fxml,java.logging,java.sql,java.management,java.security.sasl,jdk.crypto.ec</jvm.modules>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>

    <javafx.version>17</javafx.version>

    <windows.upgrade.uuid>9030ddb7-6a97-43f6-aac2-04aa27583cf3</windows.upgrade.uuid>

    <!-- seen by windows users -->
    <windows.vendor>weichware10</windows.vendor>
  </properties>

  <repositories>
    <repository>
      <id>jitpack.io</id>
      <url>https://jitpack.io</url>
    </repository>
  </repositories>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>

    <!-- GUI -->
    <!-- platform: see profile sections -->
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${javafx.version}</version>
      <classifier>${platform}</classifier>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-graphics</artifactId>
      <version>${javafx.version}</version>
      <classifier>${platform}</classifier>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-fxml</artifactId>
      <version>${javafx.version}</version>
      <classifier>${platform}</classifier>
    </dependency>

    <!-- UTIL -->
    <dependency>
      <groupId>com.github.weichware10</groupId>
      <artifactId>util</artifactId>
      <version>87106a8</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/joda-time/joda-time -->
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>2.10.13</version>
    </dependency>
  </dependencies>

  <reporting>
    <plugins>
      <!-- CHECKSTYLE -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <configLocation>checkstyle.xml</configLocation>
        </configuration>
        <reportSets>
          <reportSet>
            <reports>
              <report>checkstyle</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jxr-plugin</artifactId>
        <version>2.3</version>
      </plugin>
      <!-- finds outdated dependencies -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.8.1</version>
        <reportSets>
          <reportSet>
            <reports>
              <report>dependency-updates-report</report>
              <report>plugin-updates-report</report>
              <report>property-updates-report</report>
            </reports>
          </reportSet>
        </reportSets>
        <configuration>
          <processDependencyManagementTransitive>false</processDependencyManagementTransitive>
        </configuration>
      </plugin>
    </plugins>
  </reporting>

  <build>

    <resources>
      <resource>
        <!-- Here we are processing the platform-specific jpackage command files, adding in Maven
           properties for configuration. -->
        <directory>${project.basedir}/src/packaging</directory>
        <filtering>true</filtering>
        <targetPath>${project.build.directory}/packaging</targetPath>
      </resource>
      <!-- Add the default resource path back in - by overriding above it disables the default -->
      <resource>
        <directory>${project.basedir}/src/main/resources</directory>
      </resource>
    </resources>

    <plugins>

      <!-- CHECKSTYLE -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.1.2</version>
        <configuration>
          <configLocation>checkstyle.xml</configLocation>
          <encoding>UTF-8</encoding>
          <consoleOutput>true</consoleOutput>
          <failsOnError>true</failsOnError>
          <linkXRef>false</linkXRef>
        </configuration>
        <executions>
          <execution>
            <?m2e execute onConfiguration,onIncremental?>
            <id>validate</id>
            <phase>validate</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>com.puppycrawl.tools</groupId>
            <artifactId>checkstyle</artifactId>
            <version>9.1</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <configuration>
          <!-- This is an app, so we don't want to install it in the local Maven repository -->
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <!-- This copies all of the jar files declared by the Maven build into a single directory.
                  This makes it easy to assemble the final installer package -->
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <!-- The JavaFX libraries are bundled into the custom JVM, so we don't want to duplicate
                      them in the bundled app and installer. This command skips all of the JavaFX by groupId. -->
              <excludeGroupIds>org.openjfx</excludeGroupIds>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!-- Put the application jar generated by the project into the dependency folder - the default folder
          for the maven-dependency-plugin output. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <outputDirectory>${project.build.directory}/dependency</outputDirectory>
        </configuration>
      </plugin>
      <plugin>
        <!-- Plugin to make working with JavaFX nicer. See https://github.com/openjfx/javafx-maven-plugin -->
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>0.0.8</version>
        <configuration>
          <mainClass>${main-class}</mainClass>
        </configuration>
      </plugin>
      <plugin>
        <!-- https://github.com/wiverson/jtoolprovider-plugin -->
        <groupId>io.github.wiverson</groupId>
        <artifactId>jtoolprovider-plugin</artifactId>
        <version>1.0.34</version>
        <executions>
          <!-- This command runs jlink, generating a custom JVM by combining the JavaFX modules bundled in
              this project with the JDK modules. -->
          <execution>
            <id>jlink</id>
            <phase>package</phase>
            <goals>
              <goal>java-tool</goal>
            </goals>
            <configuration>
              <toolName>jlink</toolName>
              <removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
              <modulePath>${project.basedir}/${platform}-javafx/javafx-jmods-${javafx.version}/
              </modulePath>
              <addModules>${jvm.modules}</addModules>
              <output>${project.build.directory}/jvm-image</output>
              <args>
                <arg>--strip-native-commands</arg>
                <arg>--no-header-files</arg>
                <arg>--strip-debug</arg>
                <arg>--no-man-pages</arg>
                <arg>--compress=2</arg>
              </args>
            </configuration>
          </execution>
          <!-- The command that actually generates the installer. The options for each platform
              are found the /src/packaging directory. These files are copied into the target directory by
              the Maven resources plugin, which does the filtering to replace the original values with
              the actual Maven properties.

              https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
              -->
          <execution>
            <id>jpackage</id>
            <phase>install</phase>
            <goals>
              <goal>java-tool</goal>
            </goals>
            <configuration>
              <toolName>jpackage</toolName>
              <removeDirectories>${project.build.directory}/installer-work</removeDirectories>
              <args>@${project.build.directory}/packaging/${platform}-jpackage.txt</args>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- CODE COVERAGE -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.7</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.eluder.coveralls</groupId>
        <artifactId>coveralls-maven-plugin</artifactId>
        <version>4.3.0</version>
        <configuration>
            <!-- <repoToken></repoToken> -->
        </configuration>
        <dependencies>
          <dependency>
             <groupId>javax.xml.bind</groupId>
             <artifactId>jaxb-api</artifactId>
             <version>2.2.3</version>
          </dependency>
       </dependencies>
      </plugin>
      <!-- UPDATE VERSION-->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.8.1</version>
      </plugin>

      <!-- downloading jmod files -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <?m2e execute onConfiguration?>
            <phase>validate</phase>
            <configuration>
              <target>
                <mkdir dir="${platform}-javafx/javafx-jmods-${javafx.version}"/>
                <get src="https://raw.githubusercontent.com/weichware10/javafx-jmods/main/${platform}-javafx/javafx-jmods-${javafx.version}/javafx.base.jmod" dest="${platform}-javafx/javafx-jmods-${javafx.version}/javafx.base.jmod" skipexisting="true" />
                <get src="https://raw.githubusercontent.com/weichware10/javafx-jmods/main/${platform}-javafx/javafx-jmods-${javafx.version}/javafx.controls.jmod" dest="${platform}-javafx/javafx-jmods-${javafx.version}/javafx.controls.jmod" skipexisting="true" />
                <get src="https://raw.githubusercontent.com/weichware10/javafx-jmods/main/${platform}-javafx/javafx-jmods-${javafx.version}/javafx.fxml.jmod" dest="${platform}-javafx/javafx-jmods-${javafx.version}/javafx.fxml.jmod" skipexisting="true" />
                <get src="https://raw.githubusercontent.com/weichware10/javafx-jmods/main/${platform}-javafx/javafx-jmods-${javafx.version}/javafx.graphics.jmod" dest="${platform}-javafx/javafx-jmods-${javafx.version}/javafx.graphics.jmod" skipexisting="true" />
                <get src="https://raw.githubusercontent.com/weichware10/javafx-jmods/main/${platform}-javafx/javafx-jmods-${javafx.version}/javafx.media.jmod" dest="${platform}-javafx/javafx-jmods-${javafx.version}/javafx.media.jmod" skipexisting="true" />
                <get src="https://raw.githubusercontent.com/weichware10/javafx-jmods/main/${platform}-javafx/javafx-jmods-${javafx.version}/javafx.swing.jmod" dest="${platform}-javafx/javafx-jmods-${javafx.version}/javafx.swing.jmod" skipexisting="true" />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <pluginManagement>
      <plugins>
        <plugin>
          <!-- mvn clean -->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>3.1.2</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>3.0.0-M1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.2.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.1.2</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.2.0</version> <!-- https://stackoverflow.com/questions/65910112 -->
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.9.1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.0.0-M5</version>
        </plugin>
      </plugins>

    </pluginManagement>
  </build>

  <!-- DETERMINE OS -->
  <profiles>
    <!-- We use the built-in Maven profile activation system to set the platform property.
    These properties are then use to build the directory paths to the platform specific resources.
    It would be great if Maven automatically added the os family as a property by default
     -->
    <profile>
      <id>unix-active</id>
      <activation>
        <os>
          <family>unix</family>
        </os>
      </activation>
      <properties>
        <platform>linux</platform>
      </properties>
    </profile>
    <profile>
      <id>windows-active</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <platform>win</platform>
      </properties>
      <build>
        <plugins>
          <plugin>
            <!-- This adds a "launch on finish" to the Windows msi installer. This just tweaks the Windows
                     installer package to run the executable after the installer runs, simplifying the user experience.
                      If you don't want this behavior, just delete this plug execution. -->
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.0.0</version>
            <executions>
              <execution>
                <phase>install</phase>
                <id>add-launch-to-msi</id>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <executable>cscript</executable>
              <outputFile>${project.build.directory}/msi-result.log</outputFile>
              <workingDirectory>${project.build.directory}</workingDirectory>
              <arguments>
                <argument>${project.build.directory}/packaging/add-launch-to-msi.js</argument>
              </arguments>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>mac-active</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <properties>
        <platform>mac</platform>
      </properties>
    </profile>
  </profiles>

</project>
