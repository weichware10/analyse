name: create-release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag'
        required: true
        default: 'v*.*'
      snapshot:
        description: 'The next snapshot'
        required: true
        default: 'v*.*-SNAPSHOT'
      installer_version:
        description: 'Installer version'
        required: false
        default: '*.*.*'

jobs:
  # RUN TESTS
  run-tests:
    runs-on: ubuntu-latest
    # limit to owners
    if: contains('["joshuajeschek, weichbot10"]', github.actor)
    steps:
      - uses: actions/checkout@v2
      - name: setup java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - run: 'echo "$ENV" > src/main/resources/.env'
        shell: bash
        env:
          ENV: ${{secrets.ENV}}
      - run: mvn -B test --file pom.xml
  # COMPILE INSTALLERS
  linux-installer:
    runs-on: ubuntu-latest
    needs: run-tests
    if: "!contains(github.repository, 'util')" # do not try to build installer for non-gui-app
    steps:
      - name: checkout the repository
        uses: actions/checkout@v2
      - name: setup java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      # increase /project/version of pom.xml
      - name: increase version in pom.xml
        run: mvn versions:set -DnewVersion="${{ github.event.inputs.tag }}"
      # echo environment variables
      - run: 'echo "$ENV" > src/main/resources/.env'
        shell: bash
        env:
          ENV: ${{secrets.ENV}}
       # generate installer
      - run: mvn '-Dapp.version="${{ github.event.inputs.installer_version }}"' clean install
        if: "!startsWith(github.event.inputs.installer_version, '0')"
      # prerelease
      - run: mvn clean install
        if: "startsWith(github.event.inputs.installer_version, '0')"
      - uses: actions/upload-artifact@v2
      - uses: actions/upload-artifact@v2
        with:
          name: linux-installer
          path: target/*.deb
  windows-installer:
    runs-on: windows-latest
    needs: run-tests
    if: "!contains(github.repository, 'util')" # do not try to build installer for non-gui-app
    steps:
      - name: checkout the repository
        uses: actions/checkout@v2
      - name: setup java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      # increase /project/version of pom.xml
      - name: increase version in pom.xml
        run: mvn versions:set -DnewVersion="${{ github.event.inputs.tag }}"
      # echo environment variables
      - run: 'echo "$ENV" > src/main/resources/.env'
        shell: bash
        env:
          ENV: ${{secrets.ENV}}
      # generate installer
      - run: mvn '-Dapp.version="${{ github.event.inputs.installer_version }}"' clean install
        if: "!startsWith(github.event.inputs.installer_version, '0')"
      # prerelease
      - run: mvn clean install
        if: "startsWith(github.event.inputs.installer_version, '0')"
      - uses: actions/upload-artifact@v2
        with:
          name: windows-installer
          path: target/*.msi
  macos-installer:
    runs-on: macos-latest
    needs: run-tests
    if: "!contains(github.repository, 'util')" # do not try to build installer for non-gui-app
    steps:
      - name: checkout the repository
        uses: actions/checkout@v2
      - name: setup java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      # increase /project/version of pom.xml
      - name: increase version in pom.xml
        run: mvn versions:set -DnewVersion="${{ github.event.inputs.tag }}"
      # echo environment variables
      - run: 'echo "$ENV" > src/main/resources/.env'
        shell: bash
        env:
          ENV: ${{secrets.ENV}}
       # generate installer
      - run: mvn '-Dapp.version="${{ github.event.inputs.installer_version }}"' clean install
        if: "!startsWith(github.event.inputs.installer_version, '0')"
      # prerelease
      - run: mvn clean install
        if: "startsWith(github.event.inputs.installer_version, '0')"
      - uses: actions/upload-artifact@v2
      - uses: actions/upload-artifact@v2
        with:
          name: macos-installer
          path: target/*.dmg
  jar:
    runs-on: ubuntu-latest
    needs: run-tests
    if: "contains(github.repository, 'util')" # only package jar in util
    steps:
      # checkout
      - name: checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.WEICHBOT }}
      # increase /project/version of pom.xml
      - name: increase version in pom.xml
        run: mvn versions:set -DnewVersion="${{ github.event.inputs.tag }}"
      # setup java (default is not 17)
      - name: setup java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - run: 'echo "$ENV" > src/main/resources/.env'
        shell: bash
        env:
          ENV: ${{secrets.ENV}}
      # package to jar
      - name: package project
        run: mvn package
      - uses: actions/upload-artifact@v2
        with:
          name: jar
          path: target/*.jar

  # CREATE TAG AND UPDATE POM.XML
  create-tag:
    runs-on: ubuntu-latest
    # do not release on failing tests
    needs: [run-tests, linux-installer, windows-installer, macos-installer, jar]
    # only continue if builds where successful
    if: always() && ((needs.jar.result == 'success') || ((needs.linux-installer.result == 'success') && (needs.windows-installer.result == 'success') && (needs.macos-installer.result == 'success')))
    outputs:
      changes_detected: ${{ steps.auto-commit-action.outputs.changes_detected }}
    steps:
      # checkout
      - name: checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.WEICHBOT }}
      # setup java (default is not 17)
      - name: setup java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - run: 'echo "$ENV" > src/main/resources/.env'
        shell: bash
        env:
          ENV: ${{secrets.ENV}}
      # increase /project/version of pom.xml
      - name: increase version in pom.xml
        run: mvn versions:set -DnewVersion="${{ github.event.inputs.tag }}"
      # signed commits
      - name: import GPG
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.WEICHBOT_GPG_PRIVATE }}
          passphrase: ${{ secrets.WEICHBOT_GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      # commit changed pom file
      - name: auto commit
        id: auto-commit-action
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: pom.xml
          commit_message: '[chore] bump version to ${{ github.event.inputs.tag }}'
          commit_user_name: 'weichbot10'
          commit_user_email: 'weichbot10@users.noreply.github.com'
          tagging_message: ${{ github.event.inputs.tag }}

  # CREATE THE ACTUAL RELEASE
  create-release:
    runs-on: ubuntu-latest
    needs: create-tag
    # always needed for execution
    if: always() && (needs.create-tag.result == 'success' && needs.create-tag.outputs.changes_detected == 'true')
    steps:
      - uses: actions/download-artifact@v2 # download all artifacts
      - run: tree
      - name: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag }}
          token: ${{ secrets.WEICHBOT }}
          generate_release_notes: true
          fail_on_unmatched_files: false
          files: |
            linux-installer/*.deb
            macos-installer/*.dmg
            windows-installer/*.msi
            jar/*.jar

  # SET NEXT SNAPSHOT VERSION
  bump-version:
    runs-on: ubuntu-latest
    needs: create-release
    if: always() && (needs.create-release.result == 'success') # do not bump if no release
    steps:
      # checkout
      - name: checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.WEICHBOT }}
      # setup java (default is not 17)
      - name: setup java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - run: git pull
      # set version number to snapshot version
      - name: bump pom.xml
        run: mvn versions:set -DnewVersion="${{ github.event.inputs.snapshot }}"
      # signed commits
      - name: import GPG
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.WEICHBOT_GPG_PRIVATE }}
          passphrase: ${{ secrets.WEICHBOT_GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      # commit changed pom file
      - name: auto commit
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: pom.xml
          commit_message: '[chore] set snapshot version (${{ github.event.inputs.snapshot }})'
          commit_user_name: 'weichbot10'
          commit_user_email: 'weichbot10@users.noreply.github.com'
